#pragma once
/* C API for BVE-Reborn high performance libraries. */

/* File automatically generated by bve-build, do not modify manually */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include "bve_prefix.h"

#define BVE_CHUNK_SIZE 64.0

/**
 * The blending mode to use when rendering the mesh
 */
typedef enum {
  Normal,
  Additive,
} BVE_Mesh_Blend_Mode;

/**
 * No idea what this does, but every mesh has one or the other.
 */
typedef enum {
  DivideExponent2,
  DivideExponent4,
} BVE_Mesh_Glow_Attenuation_Mode;

typedef enum {
  Warning,
  Error,
} BVE_UserErrorCategory;

typedef struct BVE_KVPSymbols BVE_KVPSymbols;

/**
 * C safe wrapper for [`TextureSet`](bve::load::mesh::TextureSet).
 *
 * Opaque structure which wraps a set of texture names.
 *
 * # Members
 *
 * Accessible through the "member" functions:
 * - [`BVE_Texture_Set_len`] for [`TextureSet::len`](bve::load::mesh::TextureSet::len)
 * - [`BVE_Texture_Set_add`] for [`TextureSet::add`](bve::load::mesh::TextureSet::add)
 * - [`BVE_Texture_Set_lookup`] for [`TextureSet::lookup`](bve::load::mesh::TextureSet::lookup)
 *
 * # Safety
 *
 * - Must be destroyed as part of its parent [`Loaded_Static_Mesh`].
 */
typedef struct BVE_Texture_Set BVE_Texture_Set;

typedef struct {
  BVE_UserErrorCategory category;
  uint64_t line;
  char *description;
  char *description_english;
} BVE_User_Error_Data;

/**
 * C safe wrapper for an [`Option`].
 *
 * # Safety
 *
 * Reading from the `value` member is undefined behavior if `exists` is false. In practice it is zeroed.
 */
typedef struct {
  /**
   * Actual value inside the option. Reading this is undefined behavior if exists is false.
   */
  uint64_t value;
  /**
   * Flag if the value exists or not.
   */
  bool exists;
} BVE_COption_u64;

/**
 * C safe wrapper for [`Span`](bve::parse::Span).
 */
typedef struct {
  BVE_COption_u64 line;
} BVE_Span;

/**
 * C safe wrapper for [`MeshErrorKind`](bve::parse::mesh::MeshErrorKind).
 *
 * # Safety
 *
 * - Only read the union value that the `tag`/`determinant` says is inside the enum.
 * - Reading another value results in UB.
 * - Must be destroyed as part of its parent [`load::mesh::Loaded_Static_Mesh`].
 */
enum BVE_Mesh_Error_Kind_Tag {
  UTF8,
  OutOfBounds,
  UnknownInstruction,
  GenericCSV,
  UnknownCSV,
};
typedef uint8_t BVE_Mesh_Error_Kind_Tag;

typedef struct {
  BVE_COption_u64 column;
} BVE_UTF8_Body;

typedef struct {
  uintptr_t idx;
} BVE_OutOfBounds_Body;

typedef struct {
  const char *name;
} BVE_UnknownInstruction_Body;

typedef struct {
  const char *msg;
  const char *msg_english;
} BVE_GenericCSV_Body;

typedef struct {
  BVE_Mesh_Error_Kind_Tag tag;
  union {
    BVE_UTF8_Body utf8;
    BVE_OutOfBounds_Body out_of_bounds;
    BVE_UnknownInstruction_Body unknown_instruction;
    BVE_GenericCSV_Body generic_csv;
  };
} BVE_Mesh_Error_Kind;

/**
 * C safe wrapper for [`MeshError`](bve::parse::mesh::MeshError).
 *
 * # Safety
 *
 * - Must be destroyed as part of its parent [`load::mesh::Loaded_Static_Mesh`].
 */
typedef struct {
  BVE_Span location;
  BVE_Mesh_Error_Kind kind;
} BVE_Mesh_Error;

/**
 * C safe wrapper for [`MeshWarningKind`](bve::parse::mesh::MeshWarningKind).
 *
 * # Safety
 *
 * - Only read the union value that the `tag`/`determinant` says is inside the enum.
 * - Reading another value results in UB.
 * - Must be destroyed as part of its parent [`load::mesh::Loaded_Static_Mesh`].
 */
enum BVE_Mesh_Warning_Kind_Tag {
  UselessInstruction,
};
typedef uint8_t BVE_Mesh_Warning_Kind_Tag;

typedef struct {
  const char *name;
} BVE_UselessInstruction_Body;

typedef struct {
  BVE_Mesh_Warning_Kind_Tag tag;
  union {
    BVE_UselessInstruction_Body useless_instruction;
  };
} BVE_Mesh_Warning_Kind;

/**
 * C safe wrapper for [`MeshWarning`](bve::parse::mesh::MeshWarning).
 *
 * # Safety
 *
 * - Must be destroyed as part of its parent [`load::mesh::Loaded_Static_Mesh`].
 */
typedef struct {
  BVE_Span location;
  BVE_Mesh_Warning_Kind kind;
} BVE_Mesh_Warning;

/**
 * A 3-dimensional vector.
 *
 * This type is marked as `#[repr(C)]`.
 */
typedef struct {
  /**
   * The x component of the vector.
   */
  float x;
  /**
   * The y component of the vector.
   */
  float y;
  /**
   * The z component of the vector.
   */
  float z;
} BVE_Vector3_f32;

/**
 * A 4-dimensional vector.
 *
 * This type is marked as `#[repr(C)]`.
 */
typedef struct {
  /**
   * The x component of the vector.
   */
  uint8_t x;
  /**
   * The y component of the vector.
   */
  uint8_t y;
  /**
   * The z component of the vector.
   */
  uint8_t z;
  /**
   * The w component of the vector.
   */
  uint8_t w;
} BVE_Vector4_u8;

/**
 * A 2-dimensional vector.
 *
 * This type is marked as `#[repr(C)]`.
 */
typedef struct {
  /**
   * The x component of the vector.
   */
  float x;
  /**
   * The y component of the vector.
   */
  float y;
} BVE_Vector2_f32;

/**
 * All per-vertex data in a BVE mesh
 */
typedef struct {
  BVE_Vector3_f32 position;
  BVE_Vector3_f32 normal;
  BVE_Vector4_u8 color;
  BVE_Vector2_f32 coord;
  bool double_sided;
} BVE_Vertex;

/**
 * C safe wrapper for a [`Vec`].
 *
 * # Safety
 *
 * - Modifying the contents in the array is valid.
 * - Increasing `count` such that `count <= capacity` is valid.
 * - Do not manually delete/realloc the pointer. Must use the deleter for the container where this vector was found.
 */
typedef struct {
  /**
   * Ptr to the array of elements
   */
  BVE_Vertex *ptr;
  /**
   * Count of elements, do not run beyond this amount
   */
  size_t count;
  /**
   * Capacity of the underlying buffer
   */
  size_t capacity;
} BVE_CVector_Vertex;

/**
 * C safe wrapper for a [`Vec`].
 *
 * # Safety
 *
 * - Modifying the contents in the array is valid.
 * - Increasing `count` such that `count <= capacity` is valid.
 * - Do not manually delete/realloc the pointer. Must use the deleter for the container where this vector was found.
 */
typedef struct {
  /**
   * Ptr to the array of elements
   */
  size_t *ptr;
  /**
   * Count of elements, do not run beyond this amount
   */
  size_t count;
  /**
   * Capacity of the underlying buffer
   */
  size_t capacity;
} BVE_CVector_size_t;

/**
 * C safe wrapper for an [`Option`].
 *
 * # Safety
 *
 * Reading from the `value` member is undefined behavior if `exists` is false. In practice it is zeroed.
 */
typedef struct {
  /**
   * Actual value inside the option. Reading this is undefined behavior if exists is false.
   */
  uintptr_t value;
  /**
   * Flag if the value exists or not.
   */
  bool exists;
} BVE_COption_usize;

/**
 * A 3-dimensional vector.
 *
 * This type is marked as `#[repr(C)]`.
 */
typedef struct {
  /**
   * The x component of the vector.
   */
  uint8_t x;
  /**
   * The y component of the vector.
   */
  uint8_t y;
  /**
   * The z component of the vector.
   */
  uint8_t z;
} BVE_Vector3_u8;

/**
 * RGB color: Unsigned 8-bit integer per channel
 */
typedef BVE_Vector3_u8 BVE_ColorU8RGB;

/**
 * C safe wrapper for an [`Option`].
 *
 * # Safety
 *
 * Reading from the `value` member is undefined behavior if `exists` is false. In practice it is zeroed.
 */
typedef struct {
  /**
   * Actual value inside the option. Reading this is undefined behavior if exists is false.
   */
  BVE_ColorU8RGB value;
  /**
   * Flag if the value exists or not.
   */
  bool exists;
} BVE_COption_ColorU8RGB;

/**
 * C safe wrapper for [`Texture`](bve::load::mesh::Texture).
 */
typedef struct {
  BVE_COption_usize texture_id;
  BVE_COption_ColorU8RGB decal_transparent_color;
  BVE_ColorU8RGB emission_color;
} BVE_Mesh_Texture;

/**
 * RGBA color: Unsigned 8-bit integer per channel
 */
typedef BVE_Vector4_u8 BVE_ColorU8RGBA;

/**
 * The glow numbers to use for this mesh. Not sure how exactly this works.
 */
typedef struct {
  BVE_Mesh_Glow_Attenuation_Mode attenuation_mode;
  uint16_t half_distance;
} BVE_Mesh_Glow;

/**
 * C safe wrapper for [`Mesh`](bve::load::mesh::Mesh).
 *
 * # Safety
 *
 * - Must be destroyed as part of its parent [`Loaded_Static_Mesh`].
 */
typedef struct {
  BVE_CVector_Vertex vertices;
  BVE_CVector_size_t indices;
  BVE_Mesh_Texture texture;
  BVE_ColorU8RGBA color;
  BVE_Mesh_Blend_Mode blend_mode;
  BVE_Mesh_Glow glow;
} BVE_Mesh;

/**
 * C safe wrapper for a [`Vec`].
 *
 * # Safety
 *
 * - Modifying the contents in the array is valid.
 * - Increasing `count` such that `count <= capacity` is valid.
 * - Do not manually delete/realloc the pointer. Must use the deleter for the container where this vector was found.
 */
typedef struct {
  /**
   * Ptr to the array of elements
   */
  BVE_Mesh *ptr;
  /**
   * Count of elements, do not run beyond this amount
   */
  size_t count;
  /**
   * Capacity of the underlying buffer
   */
  size_t capacity;
} BVE_CVector_Mesh;

/**
 * C safe wrapper for a [`Vec`].
 *
 * # Safety
 *
 * - Modifying the contents in the array is valid.
 * - Increasing `count` such that `count <= capacity` is valid.
 * - Do not manually delete/realloc the pointer. Must use the deleter for the container where this vector was found.
 */
typedef struct {
  /**
   * Ptr to the array of elements
   */
  BVE_Mesh_Warning *ptr;
  /**
   * Count of elements, do not run beyond this amount
   */
  size_t count;
  /**
   * Capacity of the underlying buffer
   */
  size_t capacity;
} BVE_CVector_Mesh_Warning;

/**
 * C safe wrapper for a [`Vec`].
 *
 * # Safety
 *
 * - Modifying the contents in the array is valid.
 * - Increasing `count` such that `count <= capacity` is valid.
 * - Do not manually delete/realloc the pointer. Must use the deleter for the container where this vector was found.
 */
typedef struct {
  /**
   * Ptr to the array of elements
   */
  BVE_Mesh_Error *ptr;
  /**
   * Count of elements, do not run beyond this amount
   */
  size_t count;
  /**
   * Capacity of the underlying buffer
   */
  size_t capacity;
} BVE_CVector_Mesh_Error;

/**
 * C safe wrapper for [`LoadedStaticMesh`](bve::load::mesh::LoadedStaticMesh).
 *
 * # Safety
 *
 * - It and all child objects must be deleted by calling [`bve_delete_loaded_static_mesh`].
 */
typedef struct {
  BVE_CVector_Mesh meshes;
  BVE_Texture_Set *textures;
  BVE_CVector_Mesh_Warning warnings;
  BVE_CVector_Mesh_Error errors;
} BVE_Loaded_Static_Mesh;

/**
 * Function pointer type for the Panic Handler.
 *
 * # Arguments
 *
 * - `void*`: The data pointer provided using [`bve_set_panic_data`]. Allowed to be null.
 * - `const char*`: String containing human readable information about the panic, including a backtrace. Will never be
 *   null.
 *
 * # Safety
 *
 * Always allow `void*` to be null. You may assume the string is never null, utf8, and null terminated.
 */
typedef void (*BVE_PanicHandler)(void*, const char*);

/**
 * A 1-dimensional vector.
 *
 * This type is marked as `#[repr(C)]`.
 */
typedef struct {
  /**
   * The x component of the vector.
   */
  uint8_t x;
} BVE_Vector1_u8;

/**
 * R color: Unsigned 8-bit integer per channel
 */
typedef BVE_Vector1_u8 BVE_ColorU8R;

/**
 * A 2-dimensional vector.
 *
 * This type is marked as `#[repr(C)]`.
 */
typedef struct {
  /**
   * The x component of the vector.
   */
  uint8_t x;
  /**
   * The y component of the vector.
   */
  uint8_t y;
} BVE_Vector2_u8;

/**
 * RG color: Unsigned 8-bit integer per channel
 */
typedef BVE_Vector2_u8 BVE_ColorU8RG;

/**
 * A 1-dimensional vector.
 *
 * This type is marked as `#[repr(C)]`.
 */
typedef struct {
  /**
   * The x component of the vector.
   */
  uint16_t x;
} BVE_Vector1_u16;

/**
 * R color: Unsigned 16-bit integer per channel
 */
typedef BVE_Vector1_u16 BVE_ColorU16R;

/**
 * A 2-dimensional vector.
 *
 * This type is marked as `#[repr(C)]`.
 */
typedef struct {
  /**
   * The x component of the vector.
   */
  uint16_t x;
  /**
   * The y component of the vector.
   */
  uint16_t y;
} BVE_Vector2_u16;

/**
 * RG color: Unsigned 16-bit integer per channel
 */
typedef BVE_Vector2_u16 BVE_ColorU16RG;

/**
 * A 3-dimensional vector.
 *
 * This type is marked as `#[repr(C)]`.
 */
typedef struct {
  /**
   * The x component of the vector.
   */
  uint16_t x;
  /**
   * The y component of the vector.
   */
  uint16_t y;
  /**
   * The z component of the vector.
   */
  uint16_t z;
} BVE_Vector3_u16;

/**
 * RGB color: Unsigned 16-bit integer per channel
 */
typedef BVE_Vector3_u16 BVE_ColorU16RGB;

/**
 * A 4-dimensional vector.
 *
 * This type is marked as `#[repr(C)]`.
 */
typedef struct {
  /**
   * The x component of the vector.
   */
  uint16_t x;
  /**
   * The y component of the vector.
   */
  uint16_t y;
  /**
   * The z component of the vector.
   */
  uint16_t z;
  /**
   * The w component of the vector.
   */
  uint16_t w;
} BVE_Vector4_u16;

/**
 * RGBA color: Unsigned 16-bit integer per channel
 */
typedef BVE_Vector4_u16 BVE_ColorU16RGBA;

/**
 * A 1-dimensional vector.
 *
 * This type is marked as `#[repr(C)]`.
 */
typedef struct {
  /**
   * The x component of the vector.
   */
  float x;
} BVE_Vector1_f32;

/**
 * R color: 32-bit float per channel
 */
typedef BVE_Vector1_f32 BVE_ColorF32R;

/**
 * RG color: 32-bit float per channel
 */
typedef BVE_Vector2_f32 BVE_ColorF32RG;

/**
 * RGB color: 32-bit float per channel
 */
typedef BVE_Vector3_f32 BVE_ColorF32RGB;

/**
 * A 4-dimensional vector.
 *
 * This type is marked as `#[repr(C)]`.
 */
typedef struct {
  /**
   * The x component of the vector.
   */
  float x;
  /**
   * The y component of the vector.
   */
  float y;
  /**
   * The z component of the vector.
   */
  float z;
  /**
   * The w component of the vector.
   */
  float w;
} BVE_Vector4_f32;

/**
 * RGBA color: 32-bit float per channel
 */
typedef BVE_Vector4_f32 BVE_ColorF32RGBA;



/**
 * Get the localization and error data for a given error. C Interface for [`mesh::MeshError`]'s implementation of
 * [`bve::parse::UserError`].
 *
 * # Safety
 *
 * - `error` must be non-null, pointing to a valid Mesh_Error
 */
BVE_User_Error_Data BVE_Mesh_Error_to_data(const BVE_Mesh_Error *error);

/**
 * Get the localization and error data for a given warnings. C Interface for [`mesh::MeshWarning`]'s implementation of
 * [`bve::parse::UserError`].
 *
 * # Safety
 *
 * - `warning` must be non-null, pointing to a valid Mesh_Warning
 */
BVE_User_Error_Data BVE_Mesh_Warnings_to_data(const BVE_Mesh_Warning *warning);

/**
 * C "member function" for [`TextureSet::add`](bve::load::mesh::TextureSet::add).
 *
 * # Safety
 *
 * - `ptr` must be non-null.
 * - `value` Must be a valid null-terminated string. Non-utf8 is permitted, though escaped.
 */
size_t BVE_Texture_Set_add(BVE_Texture_Set *ptr, const char *value);

/**
 * C "member function" for [`TextureSet::len`](bve::load::mesh::TextureSet::len).
 *
 * # Safety
 *
 * - `ptr` must be non-null.
 */
BVE_NO_DISCARD size_t BVE_Texture_Set_len(const BVE_Texture_Set *ptr);

/**
 * C "member function" for [`TextureSet::lookup`](bve::load::mesh::TextureSet::lookup).
 *
 * # Safety
 *
 * - Pointer returned points to an owned **copy** of the texture name.
 * - Returned pointer must be deleted by [`crate::bve_delete_string`].
 * - If the lookup fails, output is null.
 */
BVE_NO_DISCARD const char *BVE_Texture_Set_lookup(const BVE_Texture_Set *ptr, size_t idx);

/**
 * C Destructor for [`Loaded_Static_Mesh`].
 *
 * # Safety
 *
 * - Object provided must be able to be reassembled into a rust datastructure before being deleted. This means the
 *   invariants of all of rust's equivalent datastructure must be upheld.
 */
void bve_delete_loaded_static_mesh(BVE_Loaded_Static_Mesh *object);

/**
 * Takes an owning pointer to a rust-generated string and deletes it.
 *
 * # Safety
 *
 * - `ptr` **ASSUMES OWNERSHIP** must be a valid pointer and the string must have been allocated in Rust. It must be
 *   zero terminated.
 */
void bve_delete_string(char *ptr);

/**
 * Reads the file at `filename` with [`bve::filesystem::read_convert_utf8`].
 *
 * # Safety
 *
 * - Pointer returned points to an **owned** string containing the contents of the file in utf8.
 * - Returned pointer must be deleted by [`crate::bve_delete_string`].
 * - If file loading fails, output is null.
 */
BVE_NO_DISCARD char *bve_filesystem_read_convert_utf8(const char *filename_ptr);

/**
 * Returns the currently set data to be passed to the panic handler. May be null.
 */
void *bve_get_panic_data(void);

/**
 * Returns the currently set panic handler. Non-null.
 */
BVE_PanicHandler bve_get_panic_handler(void);

/**
 * Initialize the runtime functionality of BVE. Initializes minimal global state to make the rest
 * of the API safe to call. ***DO NOT CALL ANY OTHER FUNCTION BEFORE YOU CALL INIT***.
 *
 * This function is not protected against panics as it must not panic due to the handler not being set up.
 *
 * May be called multiple times, but all global state will be reset.
 */
void bve_init(void);

/**
 * C Interface for [`load_mesh_from_file`](bve::load::mesh::load_mesh_from_file).
 *
 * # Safety
 *
 * - `file` must be non-null and null terminated.
 * - Result must be properly deleted.
 */
BVE_NO_DISCARD BVE_Loaded_Static_Mesh *bve_load_mesh_from_file(const char *file);

/**
 * Sets the data passed to the panic handler.
 *
 * # Safety
 *
 * - If the installed panic handler touches this data, it must be non-null and point to the data it expects
 * - There is a minor race between this function and [`bve_set_panic_handler`]. See module documentation.
 */
void bve_set_panic_data(void *data);

/**
 * Sets the panic handler to the provided function pointer.
 *
 * # Safety
 *
 * - `handler` must not be null and must point to a valid function of the proper signature.
 * - The function `handler` points to must uphold the invariants of the contract of [`PanicHandler`]
 * - There is a minor race between this function and [`bve_set_panic_data`]. See module documentation.
 */
void bve_set_panic_handler(BVE_PanicHandler handler);

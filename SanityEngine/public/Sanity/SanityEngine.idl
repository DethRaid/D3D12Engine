namespace Sanity {
    /*!
     * \brief Interface for interacting with SanityEngine
     *
     * SanityEngine is actually a singleton. This class is actually a handle to the engine singleton. That is hard to
     * express in a class name :(
     *
     * This class, and the SanityEngine API in general, is not internally synchronized. The caller must synchronize
     * access to the engine if it wishes to be multithreaded. If this ends up being a common use case I'll make an API
     * for it
     */
    [default_interface] runtimeclass SanityEngine {
        /*!
         * \brief Name of this SanityEngine instance
         *
         * Usually the name of the game that SanityEngine is running, sometimes the name of the SanityEngine editor
         */
        String Name;

        /*!
         * \brief Initializes the engine to render with the provided swapchain
         *
         * Note that this doesn't create a new instance of SanityEngine. As the method_name attribute implies, this
         * method gets the current instance of SanityEngine - or, if there isn't one, this method will make one
         */
        [method_name("GetInstance")] SanityEngine();

        /*!
         * \brief Sets the directory that SanityEngine will load content from
         */
        void SetContentDirectory(String directory);

        /*!
         * \brief Tells SanityEngine to render to a specific swap chain panel
         *
         * This method breaks the connection to whatever swapchain panel SanityEngine is currently rendering to. It is
         * the caller's responsibility to manage the swapchains
         */
        // TODO
        // void SetRenderSurface(Microsoft.UI.Xaml.Controls.SwapChainPanel renderSurface);

        /*!
         * \brief Sets the resolution that SanityEngine will render at
         */
        void SetRenderResolution(UInt32 width, UInt32 height);

        /*!
         * \brief Ticks the simulation
         */
        void Tick(Boolean isVisible);

        /*!
         * \brief Renders the world at its current state
         */
        void Render();
    }
} // namespace Sanity

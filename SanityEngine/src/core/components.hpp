#pragma once

#include <glm/ext/quaternion_float.hpp>
#include <glm/glm.hpp>
#include <glm/gtc/quaternion.hpp>
#include <rx/core/map.h>
#include <rx/core/string.h>

#include "core/types.hpp"
#include "serialization/serialization.hpp"

// The horus::component generates a GUID handle for the Horus scripting system to use when creating a component

struct [[component]] TransformComponent {
    [[horus::field]] glm::vec3 location{0};

    [[horus::field]] glm::quat rotation{};

    [[horus::field]] glm::vec3 scale{1};

    [[nodiscard]] [[horus::method]] __forceinline glm::vec3 get_forward_vector() const;

    [[nodiscard]] [[horus::method]] __forceinline glm::vec3 get_right_vector() const;

    [[nodiscard]] [[horus::method]] __forceinline glm::vec3 get_up_vector() const;

#pragma region Autogenerated

    // Autogenerated identifier for this component type. Allows this component to type to be saved to disk and
    // ReSharper disable once CppInconsistentNaming
    uint64_t _handle{0};
#pragma endregion
};

inline glm::vec3 TransformComponent::get_forward_vector() const {
    constexpr auto global_forward = glm::vec3{0, 0, 1};
    return global_forward * rotation;
}

inline glm::vec3 TransformComponent::get_right_vector() const {
    constexpr auto global_right = glm::vec3{1, 0, 0};
    return global_right * rotation;
}

inline glm::vec3 TransformComponent::get_up_vector() const {
    constexpr auto global_up = glm::vec3{0, 1, 0};
    return global_up * rotation;
}

/*!
 * \brief Component type for any entity within SanityEngine
 *
 * Entities have a system for sending and receiving events. Other components may subscribe to that system and react to events
 */
struct [[component]] SanityEngineEntity {
    Rx::Map<Rx::String, Int32> tags;

    void add_tag(const Rx::String& tag);

    void add_stacks_of_tag(const Rx::String& tag, Int32 num_stacks);

    void remove_tag(const Rx::String& tag, bool remove_all_stacks = false);
};

JSON5_CLASS(TransformComponent, location, rotation, scale)

JSON5_CLASS(SanityEngineEntity, tags)
